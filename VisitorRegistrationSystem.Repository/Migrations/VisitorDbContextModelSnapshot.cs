// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VisitorRegistrationSystem.Repository.Context;

#nullable disable

namespace VisitorRegistrationSystem.Repository.Migrations
{
    [DbContext(typeof(VisitorDbContext))]
    partial class VisitorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VisitorRegistrationSystem.Domain.Entitiy.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("CountactNo")
                        .HasMaxLength(7)
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Departments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountactNo = 4443636L,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 7, 12, 1, 43, 9, 945, DateTimeKind.Local).AddTicks(3609),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 7, 12, 1, 43, 9, 945, DateTimeKind.Local).AddTicks(3610),
                            Name = "Muhasebe"
                        },
                        new
                        {
                            Id = 2,
                            CountactNo = 4446666L,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 7, 12, 1, 43, 9, 945, DateTimeKind.Local).AddTicks(3666),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 7, 12, 1, 43, 9, 945, DateTimeKind.Local).AddTicks(3667),
                            Name = "BDH"
                        },
                        new
                        {
                            Id = 3,
                            CountactNo = 4440606L,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 7, 12, 1, 43, 9, 945, DateTimeKind.Local).AddTicks(3669),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 7, 12, 1, 43, 9, 945, DateTimeKind.Local).AddTicks(3669),
                            Name = "Orhanlı"
                        },
                        new
                        {
                            Id = 4,
                            CountactNo = 4443362L,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 7, 12, 1, 43, 9, 945, DateTimeKind.Local).AddTicks(3671),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 7, 12, 1, 43, 9, 945, DateTimeKind.Local).AddTicks(3672),
                            Name = "Netaş"
                        },
                        new
                        {
                            Id = 5,
                            CountactNo = 4448888L,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 7, 12, 1, 43, 9, 945, DateTimeKind.Local).AddTicks(3674),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 7, 12, 1, 43, 9, 945, DateTimeKind.Local).AddTicks(3674),
                            Name = "Teftiş Kurulu Başkanlığı"
                        });
                });

            modelBuilder.Entity("VisitorRegistrationSystem.Domain.Entitiy.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "55ea67e0-74ae-47a3-aeaa-176321175efe",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "320a7a84-4753-485c-b793-610cf5476040",
                            Name = "Personal",
                            NormalizedName = "PERSONAL"
                        });
                });

            modelBuilder.Entity("VisitorRegistrationSystem.Domain.Entitiy.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("VisitorRegistrationSystem.Domain.Entitiy.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0e7ace0-65dd-4512-af27-93d884d743f6",
                            Email = "adminuser@netas.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINUSER@NETAS.COM",
                            NormalizedUserName = "ADMINUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEHy1C4czPcvCRx1pzBJA8bZxzuRm891IhBylC7QqVJHbhGVQa5KRgm949jloHBpWJA==",
                            PhoneNumber = "5555555",
                            PhoneNumberConfirmed = true,
                            Picture = "defaultUser.png",
                            SecurityStamp = "4fda42fa-d4c1-4b30-8a06-b7e003e5219e",
                            TwoFactorEnabled = false,
                            UserName = "AdminUser"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "956a728f-c2ed-4832-8ecd-9646ec97d8e2",
                            Email = "personaluser@netas.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PERSONALUSER@NETAS.COM",
                            NormalizedUserName = "PERSONALUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEIax6169/WS78d97uCFQDXeGTTDAHBtORS+/nBfBRKbCy8oYznKYujzhDXqIY78vVA==",
                            PhoneNumber = "6666666",
                            PhoneNumberConfirmed = true,
                            Picture = "defaultUser.png",
                            SecurityStamp = "7abcddf7-f5de-4937-9f13-d72e5013aafe",
                            TwoFactorEnabled = false,
                            UserName = "PersonalUser"
                        });
                });

            modelBuilder.Entity("VisitorRegistrationSystem.Domain.Entitiy.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("VisitorRegistrationSystem.Domain.Entitiy.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("VisitorRegistrationSystem.Domain.Entitiy.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VisitorRegistrationSystem.Domain.Entity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("VisitorRegistrationSystem.Domain.Entity.Visitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExit")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OutDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TcNo")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Visitors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1992, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactNo = "11144445555",
                            CreatedByName = "IntinialCreated",
                            CreatedDate = new DateTime(2024, 7, 12, 1, 43, 9, 945, DateTimeKind.Local).AddTicks(1807),
                            DepartmentId = 1,
                            EnterDate = new DateTime(2024, 7, 12, 1, 43, 9, 945, DateTimeKind.Local).AddTicks(1805),
                            FirstName = "Kamer",
                            IsActive = true,
                            IsDeleted = false,
                            IsExit = false,
                            LastName = "Kaya",
                            ModifiedByName = "IntinialCreated",
                            ModifiedDate = new DateTime(2024, 7, 12, 1, 43, 9, 945, DateTimeKind.Local).AddTicks(1808),
                            OutDate = new DateTime(1999, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TcNo = "55555555555"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1999, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactNo = "22244445555",
                            CreatedByName = "IntinialCreated",
                            CreatedDate = new DateTime(2024, 7, 12, 1, 43, 9, 945, DateTimeKind.Local).AddTicks(1812),
                            DepartmentId = 2,
                            EnterDate = new DateTime(2024, 7, 12, 1, 43, 9, 945, DateTimeKind.Local).AddTicks(1811),
                            FirstName = "Hakkı",
                            IsActive = true,
                            IsDeleted = false,
                            IsExit = false,
                            LastName = "Kurumahmut",
                            ModifiedByName = "IntinialCreated",
                            ModifiedDate = new DateTime(2024, 7, 12, 1, 43, 9, 945, DateTimeKind.Local).AddTicks(1813),
                            OutDate = new DateTime(1999, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TcNo = "11155555551"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1999, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactNo = "33344445555",
                            CreatedByName = "IntinialCreated",
                            CreatedDate = new DateTime(2024, 7, 12, 1, 43, 9, 945, DateTimeKind.Local).AddTicks(1856),
                            DepartmentId = 3,
                            EnterDate = new DateTime(2024, 7, 12, 1, 43, 9, 945, DateTimeKind.Local).AddTicks(1855),
                            FirstName = "Furkan",
                            IsActive = true,
                            IsDeleted = false,
                            IsExit = false,
                            LastName = "Bakal",
                            ModifiedByName = "IntinialCreated",
                            ModifiedDate = new DateTime(2024, 7, 12, 1, 43, 9, 945, DateTimeKind.Local).AddTicks(1857),
                            OutDate = new DateTime(1999, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TcNo = "22225555555"
                        });
                });

            modelBuilder.Entity("VisitorRegistrationSystem.Domain.Entitiy.RoleClaim", b =>
                {
                    b.HasOne("VisitorRegistrationSystem.Domain.Entitiy.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VisitorRegistrationSystem.Domain.Entitiy.UserClaim", b =>
                {
                    b.HasOne("VisitorRegistrationSystem.Domain.Entitiy.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VisitorRegistrationSystem.Domain.Entitiy.UserRole", b =>
                {
                    b.HasOne("VisitorRegistrationSystem.Domain.Entitiy.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisitorRegistrationSystem.Domain.Entitiy.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VisitorRegistrationSystem.Domain.Entitiy.UserToken", b =>
                {
                    b.HasOne("VisitorRegistrationSystem.Domain.Entitiy.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VisitorRegistrationSystem.Domain.Entity.UserLogin", b =>
                {
                    b.HasOne("VisitorRegistrationSystem.Domain.Entitiy.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VisitorRegistrationSystem.Domain.Entity.Visitor", b =>
                {
                    b.HasOne("VisitorRegistrationSystem.Domain.Entitiy.Department", "Department")
                        .WithMany("Visitors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisitorRegistrationSystem.Domain.Entitiy.User", null)
                        .WithMany("Visitors")
                        .HasForeignKey("UserId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("VisitorRegistrationSystem.Domain.Entitiy.Department", b =>
                {
                    b.Navigation("Visitors");
                });

            modelBuilder.Entity("VisitorRegistrationSystem.Domain.Entitiy.User", b =>
                {
                    b.Navigation("Visitors");
                });
#pragma warning restore 612, 618
        }
    }
}
